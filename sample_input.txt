(equal? (let ([x 3] 
           [y 3] 
           [z 4]) 
          (+ x (* y z))) 15)
(equal? (let* ([x 3] 
               [y (* 2 x)] 
               [z (+ x y)]) 
        z) 9)                                                 
(equal? (let* ([x 3] 
               [y (* 2 x)] 
               [z (lambda (n m) (+ n m))]) 
         (z x y)) 9)

(equal? (letrec ([iseven (lambda (n)
                             (or (= n 0)
                                 (isodd (- n 1))))]
                 [isodd (lambda (n)
                             (and (not (= n 0))
                                 (iseven (- n 1))))])
        (isodd 11)) #t)
(equal? (letrec ([is-even? (lambda (n)
                               (or (= n 0)
                                    (is-odd? (- n 1))))]
                 [is-odd? (lambda (n)
                               (and (not (= n 0))
                                    (is-even? (- n 1))))])
          (is-odd? 11)) #t)                                    
(equal? (String? "abc +sdw$#|") true)                              
(equal? (String? 3) false)                                           
(equal? (map (lambda (x) (* 2 x)) '(1 2 3)) '(2 4 6))                  
(equal? (map (lambda (x) (* 2 x)) (list 2 3 6)) '(4 6 12))               
(define f (lambda (x) (if (> x 0) x (* x -1))))        
(equal? (map f '(1 -2 3 -4 -5 -6)) '(1 2 3 4 5 6))                           
(define g (lambda (x) (if (= x 0) 0 (+ x (g (- x 1))))))             
(equal? (map g (list 1 2 3 4)) '(1 3 6 10))                                               
(equal? (foldr (lambda (x y) (+ x y)) 0 '(1 2 3)) 6)                           
(equal? (foldr (lambda (x y) (cons x y)) '(1 2 3) '(3 4 5)) '(3 4 5 1 2 3))                 
(equal? (foldl (lambda (x y) (cons x y)) '(3 4 5) '(1 2 3)) '(3 2 1 3 4 5))                  
(equal? (foldl (lambda (x y) (cons y x)) '(3 4 5) '(1 2 3))  (cons (cons (cons '(3 4 5) 1) 2) 3))                
(equal? (foldr (lambda (x y) (cons x y)) '(3 4 5) '(1 2 3)) '(1 2 3 3 4 5))
(equal? (foldr (lambda (x y) (cons y x)) '(3 4 5) '(1 2 3))  (cons (cons (cons '(3 4 5) 3) 2) 1))                 
(equal? (remove 2 (list 1 2 3 2 4)) '(1 3 2 4))
(equal? (remove '(2) (list '(1) '(2) '(3))) '('(1) '(3)))
(equal? (remove "2" (list "1" "2" "3")) '("1" "3"))
(equal? (remove "a" (list "1" "2" "3")) '("1" "2" "3"))
(equal? (remove #\c (list #\a #\b #\c #\c #\c)) '(#\a #\b #\c #\c))
(equal? (remove '(2 3) (list #\a #\b '(2 3) #\c '(2 3))) '(#\a #\b #\c '(2 3)))
(equal? (remove (cons 2 3) (list (cons 2 3) #\a #\b (cons 2 3) #\c (cons 2 3))) '(#\a #\b '(2 . 3) #\c '(2 . 3)))
(equal? '("2") '("2"))
(equal? "2" "2")
;;this is a comment;;
(define (f x y z)
       (+ x (* y z)))
(equal? (f 3 4 5) 23)
(null? '())
(null? null)
(equal? (null? 3) #f)
(define (add-nums ls)
    (if (null? ls)
        0
        (if (number? (car ls))
               (+ (car ls) (add-nums (cdr ls)))
               (add-nums (cdr ls)))))
(equal? (add-nums (list)) 0) 
(equal? (add-nums (list 1 2 "a" 3)) 6) 
(equal? (add-nums (list '(1 2 3) #\b #\d)) 0)
(equal? (add-nums (list 0 0 0)) 0) 
(equal? (add-nums (list -1 0 1)) 0) 
(equal? (add-nums (list (cons 1 2) (cons 3 4) (cons "a" "b"))) 0) 
(define (length ls)
  (if (null? ls)
      0
      (+ 1 (length (cdr ls)))))
(equal? (length (list)) 0)
(equal? (length (list 1 2 3 "a" "b" "c")) 6)
(equal? (length (list "abc" 3 3 4 5)) 5)
(equal? (length (list (cons 1 2) (cons 3 4) (cons 4 5))) 3)
