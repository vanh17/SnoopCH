(let ([x 3] 
      [y 3] 
      [z 4]) 
    (+ x (* y z)))                                    
;;result: 15;;
(let* ([x 3] 
       [y (* 2 x)] 
       [z (+ x y)]) 
      z)                                              
;;result: 9;;    
(let* ([x 3] 
       [y (* 2 x)] 
       [z (lambda (n m) (+ n m))]) 
      (z x y))

(letrec ([iseven (lambda (n)
                       (or (= n 0)
                           (isodd (- n 1))))]
         [isodd (lambda (n)
                      (and (not (= n 0))
                           (iseven (- n 1))))])
    (isodd 11))                                       
;;result: true;;
(letrec ([is-even? (lambda (n)
                       (or (= n 0)
                           (is-odd? (- n 1))))]
           [is-odd? (lambda (n)
                      (and (not (= n 0))
                           (is-even? (- n 1))))])
    (is-odd? 11))                                     
;;result: true;;
(String? "abc +sdw$#|")                               
;; result: true;;
(String? 3)                                           
;; result: false;;
(map (lambda (x) (* 2 x)) '(1 2 3))                   
;; result: '[2 4 6];;
(map (lambda (x) (* 2 x)) (list 2 3 6))               
;; result: '[4 6 12]
(define f (lambda (x) (if (> x 0) x (* x -1))))       
;; result:;; 
(map f '(1 -2 3 -4 -5 -6))                            
;; result: '[1 2 3 4 5 6];;
(define g (lambda (x) (if (= x 0) 0 (+ x (g (- x 1))))))             
;;result: <#procedure>;;
(map g (list 1 2 3 4))                                               
;;result: '[1 3 6 10];;
(foldr (lambda (x y) (+ x y)) 0 '(1 2 3))                            
;;result: 6;;
(foldr (lambda (x y) (cons x y)) '(1 2 3) '(3 4 5))                  
;;result: '[3 4 5 1 2 3];;
(foldl (lambda (x y) (cons x y)) '(3 4 5) '(1 2 3))                  
;;result: '[3 2 1 3 4 5];;
(foldl (lambda (x y) (cons y x)) '(3 4 5) '(1 2 3))                  
;;result: '[[[[3 4 5] . 1] . 2] . 3];;
(foldr (lambda (x y) (cons x y)) '(3 4 5) '(1 2 3))                  
;;result: '[1 2 3 3 4 5];;
(foldr (lambda (x y) (cons y x)) '(3 4 5) '(1 2 3))                  
;;result: '[[[[3 4 5] . 3] . 2] . 1];;
(remove 2 (list 1 2 3 2 4))
;;'[1 3 2 4];;
(remove '(2) (list '(1) '(2) '(3)))
;;'[[1] [3]];;
(remove "2" (list "1" "2" "3"))
;;'["1" "3"];;
(remove "a" (list "1" "a" "3"))
;;'["1" "3"];;
(remove #\c (list #\a #\b #\c #\c #\c))
;;'[#\a #\b #\c #\c];;
(remove '(2 3) (list #\a #\b '(2 3) #\c '(2 3)))
;;'[#\a #\b #\c '[2 3];;
(remove (cons 2 3) (list (cons 2 3) #\a #\b (cons 2 3) #\c (cons 2 3)))
;;'[#\a #\b '(2. 3) #\c '[2 . 3];;
(equal? '("2") '("2"))
;;result: #t;;
